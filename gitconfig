[diff]
#   Gives more sensible diffs on the command line
	algorithm = patience
# Configure diffmerge (https://sourcegear.com/diffmerge/)
#   as diff & merge tool
	tool = diffmerge
[difftool "diffmerge"]
	cmd = diffmerge $LOCAL $REMOTE
[merge]
	tool = diffmerge
[mergetool]
	keepBackup = false
[mergetool "diffmerge"]
	cmd = diffmerge --merge --result=$MERGED $LOCAL $BASE $REMOTE
	trustExitCode = true
[branch]
# Rebasing is preferable to Merging
        autosetuprebase = always
[pull]
	rebase = true
[push]
	default = simple
[fetch]
	prune = true
[credential]
# Let OS X remember our logins for us
	helper = osxkeychain
[alias]
#   Just for brevity
        stat = status
#   `checkout` should just deal with commits, not individual files too
        clobber = checkout -- 
#   "cached" instead of "stage" or even "index"; yeah, that's perfectly obvious.</sarcasm>
        diff-staged = diff --cached
        difftool-staged = difftool --cached
        wdiff-staged = diff --word-diff --cached
        diff-unstaged = diff
        difftool-unstaged = difftool
	wdiff-unstaged = diff --word-diff
#   Operate on the current branch for convenience
#       I'd like to take this opportunity to say that `push branch [to] remote` would be so much more natural
#       than git's `push[, to] remote[, ] branch` ordering (*sigh*)
#     Would just be "push", but git doesn't allow that
        push-to = "!f() { branchname=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/\\1/'`; git push \"$1\" \"$branchname\"; }; f"
        force-push-to = "!f() { branchname=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \\(.*\\)/\\1/'`; git push -f \"$1\" \"$branchname\"; }; f"
# branches
        branches = "!sh -c 'echo Unmerged: && git branch -a -v --no-merged && echo Merged: && git branch -a -v --merged'"
#   `checkout` really shouldn't be the command for this
        new-branch = checkout -b
        delete-branch-local = branch -d
        delete-merged-branches = "!f() { git branch --no-color --merged | grep -v '\\*' | grep -v master | grep -v develop | xargs -n 1 git branch -d; }; f"
        set-branch-head = branch -f
#   Magic colons were a horrible UI choice
        delete-branch-remote = "!f() { git push --delete \"$2\" \"$1\" ; }; f"
#   Make conflict resolution feel more integrated
        resolve = mergetool
# staging
        stage = add --all
        stage-patch = add --all -p
        unstage = reset HEAD
# stash
#   would just be "stash", but git doesn't allow that
        stash-changes = stash save
        unstash = stash pop --index
        stashes = stash list
        delete-stash = stash drop
# rebase-ish
#   Make amending first-class
        amend = commit --amend
        amend-author = commit --amend -C HEAD --author
#   Separate the two rather different uses of rebase
        rebase-against = rebase
        rebase-since = rebase -i
# useful as something to diff against
	null-sha = hash-object -t tree /dev/null
